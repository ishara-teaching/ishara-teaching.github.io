#! /usr/bin/env python

# Demo for 722 lecture

import pygame
from pygame.locals import *


# First, we initialize pygame.
pygame.init()
running = True
#pygame.display.set_icon(Surface)
pygame.display.set_caption("722 Example", "722 Example")
screen = pygame.display.set_mode((600,600))
clock = pygame.time.Clock()





# This is the main loop. This handles the main menu if no game is running
# or the game itself. This is also the interceptor for all user input.
my_game = None
my_menu = None

points_a = []
points_q = []
points_z = []
distribution_target = None
bg= None


SIDE = 1
BIG_K = 5

def prob(x,y):
    points = points_a+points_q+points_z
    total = 0
    for p in points:
        if p[0] >= x-SIDE/2. and p[0] <= x+SIDE/2. and p[1] >= y-SIDE/2. and p[1] <= y+SIDE/2.:
            total += (1./(SIDE*SIDE))*1
    return (1./len(points)) * total
def dist(x1,x2,y1,y2):
    return ((x1-x2)**2 + (y1-y2)**2)**.5
def knn(k,x,y):
    points = []
    for a in points_a: points.append((dist(x,a[0],y,a[1]),0)) #red
    for a in points_q: points.append((dist(x,a[0],y,a[1]),1)) #green
    for a in points_z: points.append((dist(x,a[0],y,a[1]),2)) #blue
    points.sort()
    points = points[:k]
    a,q,z = 0,0,0
    for p in points:
        if p[1] == 0: a += 1
        if p[1] == 1: q += 1
        if p[1] == 2: z += 1
    if a > q and a > z: return 0
    if q > a and q > z: return 1
    if z > a and z > q: return 2
    return 0

while running:
    clock.tick(40)
    
    # Do we have a game or a game menu? We need to at least have a menu.
    affected_area = [ pygame.Rect(0,0,600,600) ]
    screen.fill( (244,244,244) )
    if bg:
        screen.blit(bg,(0,0))
    
    for p in points_a:
        R = pygame.Rect(0,0,10,10)
        R.center = int(p[0]*60),int(p[1]*60)
        pygame.draw.rect(screen, (255,0,0), R, 0)
        pygame.draw.rect(screen, (0,0,0), R, 1)
        
    for p in points_q:
        R = pygame.Rect(0,0,10,10)
        R.center = int(p[0]*60),int(p[1]*60)
        pygame.draw.rect(screen, (0,255,0), R, 0)
        pygame.draw.rect(screen, (0,0,0), R, 1)
        
    for p in points_z:
        R = pygame.Rect(0,0,10,10)
        R.center = int(p[0]*60),int(p[1]*60)
        pygame.draw.rect(screen, (0,0,255), R, 0)
        pygame.draw.rect(screen, (0,0,0), R, 1)
    
    if distribution_target:
        R = pygame.Rect(0,0,SIDE*60,SIDE*60)
        dt = int(distribution_target[0]*60), int(distribution_target[1]*60)
        R.center = dt
        c = [0,0,0]
        c[knn(BIG_K, distribution_target[0], distribution_target[1] )] = 255
        pygame.draw.rect(screen, c, R, 1)
        density = prob(*distribution_target)
        predict = density * SIDE * SIDE
        FF = pygame.font.Font( None, 30 )
        a = FF.render( "Density: "+str(density)[:6], True, c)
        ar = a.get_rect()
        ar.topleft = dt
        ar = ar.move(0,SIDE*60/2)
        screen.blit(a,ar)
    
    FF = pygame.font.Font( None, 30 )
    t1 = FF.render( "K = "+str(BIG_K), True, (0,0,0))
    t2 = FF.render( "h = "+str(SIDE), True, (0,0,0))
    t1r = t1.get_rect()
    t2r = t2.get_rect()
    t1r.bottomright = 600,600
    t2r.bottomleft = 0,600
    screen.blit(t1,t1r)
    screen.blit(t2,t2r)
    
    
    
    
    pygame.display.update()
    
    # Whenever we have input, we take the input and save it in a List, passing
    # it to all of the "Interactables" in our scope. Game objects are
    # interactables, as are Convos. When an interactable consumes an event, it
    # destructively modifies the list. 
    events = pygame.event.get()
    if my_game: my_game.handle_events(events)
    if my_menu: my_menu.handle_events(events)
    
    mx,my = pygame.mouse.get_pos()
    for e in events:
        if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE) :
            running = False
        if e.type == KEYDOWN:
            if e.key == K_a:
                points_a.append( (mx/60.,my/60.) )
                bg = None
            if e.key == K_q:
                points_q.append( (mx/60.,my/60.) )
                bg = None
            if e.key == K_z:
                points_z.append( (mx/60.,my/60.) )
                bg = None
            if e.key == K_c:
                points_a = []
                points_q = []
                points_z = [] 
                distribution_target = None
                bg = None
            if e.key == K_d:
                if len( points_a + points_q + points_z ) > 0:
                    distribution_target = mx/60.,my/60.
            if e.key == K_g:
                if len( points_a + points_q + points_z ) > 0:
                    bg = pygame.Surface((600,600))
                    for ix in range(60):
                        for iy in range(60):
                            c = [200,200,200]
                            c[knn(BIG_K,ix*10/60.,iy*10/60.)] = 255
                            pygame.draw.rect(bg, c, pygame.Rect(ix*10, iy*10, 10, 10) )
            if e.key == K_o: BIG_K += 1; bg = None
            if e.key == K_l: BIG_K -= 1; bg = None
            if e.key == K_i: SIDE += .1
            if e.key == K_k: SIDE -= .1
            if e.key == K_1:
                bg = None
                points_a = [(0.7666666666666667, 4.55), (0.7666666666666667, 4.483333333333333), (1.3, 4.05), (1.75, 3.75), (2.0166666666666666, 3.5166666666666666), (2.433333333333333, 3.1166666666666667), (2.85, 2.7333333333333334), (3.533333333333333, 2.1166666666666667), (3.8833333333333333, 1.7333333333333334), (3.933333333333333, 1.6), (3.35, 1.6), (2.55, 2.2), (1.5666666666666667, 3.066666666666667), (1.0833333333333333, 3.5166666666666666), (0.9666666666666667, 3.3833333333333333), (1.4, 2.7666666666666666), (1.9, 2.1666666666666665), (2.5833333333333335, 1.4833333333333334), (2.6666666666666665, 1.4333333333333333)]
                points_q = []
                points_z = [(5.783333333333333, 2.05), (5.583333333333333, 2.283333333333333), (4.75, 3.1666666666666665), (3.8, 4.283333333333333), (3.316666666666667, 4.916666666666667), (2.283333333333333, 5.8), (1.8166666666666667, 6.383333333333334), (1.1833333333333333, 7.266666666666667), (1.85, 7.1), (3.0833333333333335, 6.2), (4.633333333333334, 4.6), (5.266666666666667, 3.8833333333333333), (6.05, 3.15), (6.25, 3.1), (5.8, 4.55), (4.183333333333334, 6.15), (2.6666666666666665, 7.616666666666666), (2.5, 7.95), (3.6666666666666665, 7.8), (5.316666666666666, 6.583333333333333), (6.516666666666667, 5.0), (7.133333333333334, 4.216666666666667)]


            if e.key == K_2:
                bg = None
                points_a = [(2.6333333333333333, 2.7333333333333334), (2.55, 2.75), (2.4833333333333334, 3.45), (2.3833333333333333, 4.233333333333333), (2.3666666666666667, 5.033333333333333), (2.3666666666666667, 5.033333333333333), (2.066666666666667, 6.716666666666667), (2.45, 7.266666666666667), (4.116666666666666, 7.416666666666667), (6.116666666666666, 7.116666666666666), (7.133333333333334, 6.866666666666666), (7.133333333333334, 6.85), (7.8, 5.966666666666667), (7.866666666666666, 4.983333333333333), (7.866666666666666, 4.466666666666667), (7.866666666666666, 4.15), (7.916666666666667, 3.0), (7.816666666666666, 2.6666666666666665), (7.333333333333333, 2.35), (6.733333333333333, 2.183333333333333), (4.95, 2.1), (4.933333333333334, 2.1), (3.6333333333333333, 2.066666666666667), (3.2333333333333334, 2.2)]
                points_q = []
                points_z = [(4.533333333333333, 4.3), (4.533333333333333, 4.466666666666667), (4.533333333333333, 5.366666666666666), (3.966666666666667, 5.733333333333333), (3.8833333333333333, 4.6), (4.633333333333334, 4.266666666666667), (5.15, 4.55), (5.35, 4.85), (6.066666666666666, 5.2), (6.433333333333334, 4.466666666666667), (6.116666666666666, 4.1), (5.55, 4.016666666666667)]


            if e.key == K_3:
                bg = None
                points_a = [(3.1333333333333333, 4.816666666666666), (3.183333333333333, 4.816666666666666), (3.2666666666666666, 5.033333333333333), (3.283333333333333, 5.15), (3.283333333333333, 5.166666666666667), (3.0166666666666666, 5.1), (7.416666666666667, 2.033333333333333), (7.5, 2.05), (7.6, 2.2333333333333334), (7.766666666666667, 2.1666666666666665), (7.766666666666667, 1.95), (7.633333333333334, 1.8333333333333333), (7.433333333333334, 1.75), (6.0, 1.6166666666666667), (5.883333333333334, 1.4833333333333334), (5.766666666666667, 1.4)]
                points_q = [(1.95, 7.75), (1.8666666666666667, 7.75), (2.1333333333333333, 7.783333333333333), (2.3833333333333333, 7.916666666666667), (2.3, 8.233333333333333), (1.8166666666666667, 8.333333333333334), (1.7333333333333334, 8.166666666666666), (1.9, 8.066666666666666), (5.3, 7.0), (5.3, 7.05), (5.383333333333334, 7.433333333333334), (5.416666666666667, 7.85), (5.416666666666667, 7.85)]
                points_z = [(5.666666666666667, 5.416666666666667), (5.666666666666667, 5.416666666666667), (5.666666666666667, 5.15), (5.65, 4.883333333333334), (5.566666666666666, 4.55), (5.466666666666667, 4.116666666666666), (5.433333333333334, 3.783333333333333), (5.416666666666667, 3.533333333333333), (0.5833333333333334, 1.5166666666666666), (0.5666666666666667, 1.5), (0.8833333333333333, 1.4833333333333334), (1.15, 1.4666666666666666), (1.3166666666666667, 1.4666666666666666), (1.3333333333333333, 1.6833333333333333), (1.3, 1.75), (0.8666666666666667, 1.8166666666666667), (0.6833333333333333, 1.8333333333333333), (8.433333333333334, 8.266666666666667), (8.4, 8.383333333333333), (8.4, 8.716666666666667), (8.6, 8.916666666666666), (8.8, 8.933333333333334), (9.016666666666667, 8.583333333333334), (9.016666666666667, 8.15), (8.8, 7.866666666666666), (8.25, 7.766666666666667), (8.1, 7.45), (8.266666666666667, 7.083333333333333), (8.75, 6.683333333333334), (8.916666666666666, 6.216666666666667), (8.783333333333333, 5.983333333333333), (8.166666666666666, 6.233333333333333), (8.133333333333333, 6.683333333333334), (8.4, 7.033333333333333), (8.75, 7.233333333333333), (8.966666666666667, 7.416666666666667), (3.716666666666667, 9.0), (1.85, 7.3), (0.8, 8.45), (0.95, 5.65), (2.6666666666666665, 3.816666666666667), (2.7, 1.8666666666666667), (1.4333333333333333, 0.6166666666666667), (1.2666666666666666, 3.6166666666666667), (4.933333333333334, 2.45), (4.866666666666666, 0.65), (6.616666666666666, 0.8166666666666667), (6.983333333333333, 2.1333333333333333), (9.466666666666667, 2.2666666666666666), (9.233333333333333, 1.4166666666666667), (7.583333333333333, 3.8333333333333335), (7.066666666666666, 5.5), (6.833333333333333, 7.016666666666667), (6.366666666666666, 8.366666666666667), (6.866666666666666, 8.783333333333333), (9.85, 6.7), (9.166666666666666, 4.8)]


# So long, and thanks for all the fish!
pygame.quit()

